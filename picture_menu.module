<?php

/**
 * @file
 * Defines a picture menu
 */


/**
 * Implements hook_field_info().
 */
function picture_menu_field_info() {
  return array(
    'picture_menu' => array(
      'label' => t('Picture Menu'),
      'description' => t('This field creates picture menus with a header, image and description'),
      'instance_settings' => array(
        'headertag' => 'h3',
        'imageheight' => '300',
        'imagewidth' => '300',
        'file_extensions' => 'png gif jpg jpeg',
        'file_directory' => 'picture_menu',
        'max_filesize' => '1 MB',
      ),
      'default_widget' => 'picture_menu_widget',
      'default_formatter' => 'picture_menu_default',
    ),
  );
}


/**
 * Implements hook_field_settings_form().
 */
function picture_menu_field_settings_form($field, $instance, $has_data) {
  $settings = $field['settings'];
  $form = array();
  return $form;
}


/**
 * Implements hook_field_instance_settings_form().
 */
function picture_menu_field_instance_settings_form($field, $instance) {
  $settings = $instance['settings'];
  
  // Use the file field instance settings form as a basis.
  $form = file_field_instance_settings_form($field, $instance);
  
  $form['headertag'] = array(
    '#type' => 'select',
    '#title' => t('Header Tag'),
    '#default_value' => $settings['headertag'],
    '#options' => array(
      'span' => t('span'),
      'h1' => t('h1'),
      'h2' => t('h2'),
      'h3' => t('h3'),
      'h4' => t('h4'),
      'h5' => t('h5'),
    ),
    '#description' => t('Controls which header tag is used for the item titles - accessibility guidelines may require a specific header level.'),
  );
  
  $form['imageheight'] = array(
    '#type' => 'textfield',
    '#title' => t('Image Height'),
    '#default_value' => $settings['imageheight'],
    '#description' => t('Controls the height of the image.  eg. "300".  Sizes are in pixels'),
    '#size' => 30,
    '#maxlength' => 30,
    '#required' => TRUE,
    '#element_validate' => array('element_validate_integer_positive'),
  );
  
  $form['imagewidth'] = array(
    '#type' => 'textfield',
    '#title' => t('Image Width'),
    '#default_value' => $settings['imagewidth'],
    '#description' => t('Controls the width of the image and associated menu item.  eg. "300".  Sizes are in pixels.'),
    '#size' => 30,
    '#maxlength' => 30,
    '#required' => TRUE,
    '#element_validate' => array('element_validate_integer_positive'),
  );

  // Remove the description option.
  unset($form['description_field']);

  return $form;
}

/**
 * Implements hook_field_load().
 */
// Loads the image files from the file IDs. 
function picture_menu_field_load($entity_type, $entities, $field, $instances, $langcode, &$items, $age) {
  file_field_load($entity_type, $entities, $field, $instances, $langcode, $items, $age);
}

/**
 * Implements hook_field_insert().
 */
function picture_menu_field_insert($entity_type, $entity, $field, $instance, $langcode, &$items) {
  file_field_insert($entity_type, $entity, $field, $instance, $langcode, $items);
}

/**
 * Implements hook_field_update().
 */
function picture_menu_field_update($entity_type, $entity, $field, $instance, $langcode, &$items) {
  file_field_update($entity_type, $entity, $field, $instance, $langcode, $items);
}

/**
 * Implements hook_field_delete().
 */
function picture_menu_field_delete($entity_type, $entity, $field, $instance, $langcode, &$items) {
  file_field_delete($entity_type, $entity, $field, $instance, $langcode, $items);
}

/**
 * Implements hook_field_delete_revision().
 */
function picture_menu_field_delete_revision($entity_type, $entity, $field, $instance, $langcode, &$items) {
  file_field_delete_revision($entity_type, $entity, $field, $instance, $langcode, $items);
}

/**
 * Implements hook_field_is_empty().
 */
function picture_menu_field_is_empty($item, $field) {
  return file_field_is_empty($item, $field);
}

/**
 * Implements hook_field_widget_info().
 */
function picture_menu_field_widget_info() {
  return array(
    'picture_menu_widget' => array(
      'label' => t('Picture menu'),
      'field types' => array('picture_menu'),
      'settings' => array(
        'progress_indicator' => 'throbber',
        'preview_image_style' => 'thumbnail',
      ),
      'behaviors' => array(
        'multiple values' => FIELD_BEHAVIOR_CUSTOM,
        'default value' => FIELD_BEHAVIOR_NONE,
      ),
    ),
  );
}

/**
 * Implements hook_field_widget_settings_form().
 */
function picture_menu_field_widget_settings_form($field, $instance) {
  $form = file_field_widget_settings_form($field, $instance);
  return $form;
}

/**
 * Implements hook_field_widget_form().
 * 
 * This function creates the field elements on the edit page.
 *
 */
function picture_menu_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  // Add some settings file_field_widget_form() expects
  $field['settings']['display_field'] = 0;
  $field['settings']['uri_scheme'] = 'public';
  
  $elements = file_field_widget_form($form, $form_state, $field, $instance, $langcode, $items, $delta, $element);
  $settings = $instance['settings'];

  foreach (element_children($elements) as $delta) {
    // Add upload resolution validation
    if($instance['settings']['imageheight'] || $instance['settings']['imagewidth']) {
      $elements[$delta]['#upload_validators']['file_validate_image_resolution'] = array($instance['settings']['imageheight'] . "x" . $instance['settings']['imagewidth'], $instance['settings']['imageheight'] . "x" . $instance['settings']['imagewidth']);
    }
    // If not using custom extension validation, ensure this is an image.
    $supported_extensions = array('png', 'gif', 'jpg', 'jpeg');
    $extensions = isset($elements[$delta]['#upload_validators']['file_validate_extensions'][0]) ? $elements[$delta]['#upload_validators']['file_validate_extensions'][0] : implode(' ', $supported_extensions);
    $extensions = array_intersect(explode(' ', $extensions), $supported_extensions);
    $elements[$delta]['#upload_validators']['file_validate_extensions'][0] = implode(' ', $extensions);

    // Add all extra functionality provided by the picture_menu widget.
    $elements[$delta]['#process'][] = 'picture_menu_field_widget_process';
  }

  if ($field['cardinality'] == 1) {
    // If there's only one field, return it as delta 0.
    if (empty($elements[0]['#default_value']['fid'])) {
      $elements[0]['#description'] = theme('file_upload_help', array('description' => field_filter_xss($instance['description']), 'upload_validators' => $elements[0]['#upload_validators']));
    }
  }
  else {
    $elements['#file_upload_description'] = theme('file_upload_help', array('upload_validators' => $elements[0]['#upload_validators']));
  }
  return $elements;
}


/**
 * An element #process callback for the picture_menu field type
 * Expands the form to include extra fields.
 */
function picture_menu_field_widget_process($element, &$form_state, $form) {
  $item = $element['#value'];
  $item['fid'] = $element['fid']['#value'];
  $instance = field_widget_instance($element, $form_state);

  $settings = $instance['settings'];
  $widget_settings = $instance['widget']['settings'];

  $element['#theme'] = 'picture_menu_widget';
  $element['#attached']['css'][] = drupal_get_path('module', 'image') . '/image.css';
  
  // Add the image preview.
  if ($element['#file']) {
    $variables = array(
      'path' => $element['#file']->uri,
    );

    // Determine image dimensions.
    if (isset($element['#value']['width']) && isset($element['#value']['height'])) {
      $variables['width'] = $element['#value']['width'];
      $variables['height'] = $element['#value']['height'];
    }
    else {
      $info = image_get_info($element['#file']->uri);

      if (is_array($info)) {
        $variables['width'] = $info['width'];
        $variables['height'] = $info['height'];
      }
      else {
        $variables['width'] = $variables['height'] = NULL;
      }
    }

    $element['preview'] = array(
      '#type' => 'markup',
      '#markup' => theme('image', $variables),
    );

    // Store the dimensions in the form so the file doesn't have to be accessed
    // again. This is important for remote files.
    $element['width'] = array(
      '#type' => 'hidden',
      '#value' => $variables['width'],
    );
    $element['height'] = array(
      '#type' => 'hidden',
      '#value' => $variables['height'],
    );
  }
  
  // Add the additional alt and title fields.
  $element['alt'] = array(
    '#title' => t('Alternate text'),
    '#type' => 'textfield',
    '#default_value' => isset($item['alt']) ? $item['alt'] : '',
    '#description' => t('This text will be used by screen readers, search engines, or when the image cannot be loaded.'),
    // @see http://www.gawds.org/show.php?contentid=28
    '#maxlength' => 512,
    '#weight' => -2,
    '#prefix' => '<div class="container-inline">',
    '#suffix' => '</div>',
  );
  $element['header'] = array(
    '#type' => 'textfield',
    '#title' => t('Header'),
    '#default_value' => isset($item['header']) ? $item['header'] : '',
    '#description' => t('The header that goes above the image.'),
    '#maxlength' => 1024,
    '#weight' => -10,
    '#prefix' => '<div class="container-inline">',
    '#suffix' => '</div>',
  );
  $element['description'] = array(
    '#title' => t('Description'),
    '#type' => 'textfield',
    '#default_value' => isset($item['description']) ? $item['description'] : NULL,
    '#description' => t('The short description that appears under the image'),
    '#prefix' => '<div class="container-inline">',
    '#suffix' => '</div>',
    '#maxlength' => 2000,
    '#weight' => 40,
  );
  $element['link'] = array(
    '#title' => t('Link'),
    '#type' => 'textfield',
    '#default_value' => isset($items[$delta]['link'])? $items[$delta]['link'] : NULL,
    '#maxlength' => 2083,
    '#description' => t('Link for this item'),
    '#required' => FALSE,
    '#prefix' => '<div class="container-inline">',
    '#suffix' => '</div>',
    '#weight' => 30,
  );

  return $element;  
}


/**
 * Returns HTML for an image field widget.
 *
 * @param $variables
 *   An associative array containing:
 *   - element: A render element representing the image field widget.
 *
 * @ingroup themeable
 */
function theme_picture_menu_widget($variables) {
  $element = $variables['element'];
  $output = '';
  $output .= '<div class="picture-menu-widget form-managed-file clearfix">';

  if (isset($element['preview'])) {
    $output .= '<div class="picture-menu-widget-preview">';
    $output .= drupal_render($element['preview']);
    $output .= '</div>';
  }

  $output .= '<div class="picture-menu-widget-data">';
  if ($element['fid']['#value'] != 0) {
    $element['filename']['#markup'] .= ' <span class="file-size">(' . format_size($element['#file']->filesize) . ')</span> ';
  }
  $output .= drupal_render_children($element);
  $output .= '</div>';
  $output .= '</div>';

  return $output;
}

























/**
 * Implements hook_field_validate().
 */
function picture_menu_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
  foreach ($items as $delta => $item) {
    if(!empty($item['header'])) {
      // Make sure there is a picture
      if($item['fid'] == 0) {
        $errors[$field['field_name']][$langcode][$delta][] = array(
          'error' => 'image_missing',
          'message' => t('%name: an image is required', array('%name' => $instance['label'])),
        );
      }
      // Make sure there is a valid link
      if(!valid_url(url($item['link']))) {
        $errors[$field['field_name']][$langcode][$delta][] = array(
          'error' => 'invalid_link',
          'message' => t('%name: link is invalid', array('%name' => $instance['label'])),
        );
      }
    }
  }
}

/**
 * Implements hook_field_formatter_info().
 */
function picture_menu_field_formatter_info() {
  $types = array(
    'picture_menu',
  );
  return array(
    'picture_menu_default' => array(
      'label' => t('Default'),
      'field types' => $types,
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function picture_menu_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {


  $result = array(
    array(
      '#markup' => theme('picture_menu', array(
        'items' => $items,
        'headertag' => $instance['settings']['headertag'],
        'imageheight' => $instance['settings']['imageheight'],
        'imagewidth' => $instance['settings']['imagewidth'],        
      )),
    ),
  );
  return $result;
}


/**
 * Returns HTML for the picture menu
 */

function theme_picture_menu($vars) {
  drupal_add_css(drupal_get_path('module', 'picture_menu') . '/picture_menu.css');
  $output = '';

  $output .= '<div id="' . drupal_html_id('picture-menu') . '" class="picture-menu">';
  foreach($vars['items'] as $delta => $item) {
    $output .= theme_picture_menu_item($item, $delta, $vars['headertag'], $vars['imageheight'], $vars['imagewidth']);
  }
  $output .= '</div>';
  return $output;
}

function theme_picture_menu_item($item, $delta, $headertag, $imageheight, $imagewidth) {
  $url = check_url(url($item['link']));
  
  $output = '<div class="picture-menu-item" style="width: ' . $imagewidth . 'px;">';
  $output .= '  <div class="picture-menu-item-header"><a href="' . $url . '"><' . $headertag . '>' . check_plain($item['header']) . '</' . $headertag . '></a></div>';
  $output .= '  <div class="picture-menu-item-image">';
  $output .= '    <a href="' . $url . '">';
  $output .= '      <img src="' . file_create_url(file_load($item['fid'])->uri) . '" alt="' . check_plain($item['header']) . '" style="height: ' . $imageheight . 'px; width: ' . $imagewidth . 'px;"/>';
  $output .= '    </a>';
  $output .= '  </div>';
  $output .= '  <div class="picture-menu-item-description">' . check_plain($item['description']) . '</div>';
  $output .= '</div>';
  return $output;
}










/**
 * Implements hook_field_widget_error().
 */
function picture_menu_field_widget_error($element, $error, $form, &$form_state) {
  text_field_widget_error($element, $error, $form, $form_state);
}


/**
 * Wrapper for hook_field_attach_form() and hook_field_attach_submit().
 */
function _picture_menu_field_invoke($op, $entity_type, $entity, &$form, &$form_state) {
  list(, , $bundle) = entity_extract_ids($entity_type, $entity);
  $instances = field_info_instances($entity_type, $bundle);
  $function = '_picture_menu_field_' . $op;
  $types = array(
    'picture_menu',
  );
  foreach ($instances as $instance) {
    $field_name = $instance['field_name'];
    $field = field_info_field($field_name);
    if (in_array($field['type'], $types)) {
      $function($field_name, $entity, $form, $form_state);
    }
  }
}


/**
 * Implements hook_field_attach_form().
 */
function picture_menu_field_attach_form($entity_type, $entity, &$form, &$form_state) {
  _picture_menu_field_invoke('form', $entity_type, $entity, $form, $form_state);
}

/**
 * Implements hook_filter_format_update().
 */
function picture_menu_filter_format_update($format) {
  field_cache_clear();
}

/**
 * Implements hook_filter_format_disable().
 */
function picture_menu_filter_format_disable($format) {
  field_cache_clear();
}


/**
 * Implements hook_theme().
 */
function picture_menu_theme() {
  return array(
    'picture_menu_admin' => array(
      'render element' => 'element',
    ),
    'picture_menu' => array(
      'render element' => 'element',
    ),
    'picture_menu_widget' => array(
      'render element' => 'element',
    ),
  );
}





/**
 * Returns HTML for picture menu admin widget.
 */
function theme_picture_menu_admin($vars) {
 $element = $vars['element'];
  $output = '';
  $table_id = drupal_html_id($element['#field_name'] . '_values');
  $required = !empty($element['#required']) ? theme('form_required_marker', $vars) : '';
  $header = array(
    array(
      'data' => t('Items'),
      'class' => array('tabledrag-hide'),
    ),
    t('Order'),
  );
  $rows = array();
  $items = array();
  foreach (element_children($element) as $key) {
    if ('add_more' === $key) {
      $add_more_button = &$element[$key];
    }
    else {
      $items[] = &$element[$key];
    }
  }
  $depths = array(-1 => -1);
  foreach ($items as $item) {
    $item['_weight']['#attributes']['class'] = array('weight');
    $depth = 0;
    $weight = drupal_render($item['_weight']);
    $cells = array(
      theme('indentation', array('size' => $depth)) . '<div class="accordion-tree-form-item">' . drupal_render($item) . '</div>',
      $weight,
    );
    $rows[] = array(
      'data' => $cells,
      'class' => array('draggable'),
    );
  }
  $output = '<a class="accordionitem-showhide" href="#hide">Show/hide item bodies to rearrange</a>';
  $output .= '<div class="form-item">' . theme('table', array(
    'header' => $header,
    'rows' => $rows,
    'attributes' => array('id' => $table_id),
  )) . ($element['#description'] ? '<div class="description">' . $element['#description'] . '</div>' : '')
    . '<div class="clearfix">' . drupal_render($add_more_button) . '</div></div>';
  drupal_add_tabledrag($table_id, 'order', 'sibling', 'weight', NULL, 'weight');
  $output = array(
    'items' => array(
      '#type' => 'fieldset',
      '#title' => t('!title !required', array(
        '!title' => $element['#title'],
        '!required' => $required,
      )),
      '#attributes' => array('class' => array('collapsible')),
      'content' => array(
        '#markup' => $output,
      ),
    ),
    '#attached' => array('js' => array('misc/collapse.js', 'misc/form.js')),
  );

  return drupal_render($output);
}

function _picture_menu_field_form($name, $entity, &$form, $form_state) {
  foreach ($form[$name] as $l => &$field) {
    if ('#' !== $l[0]) {
      $field['#theme'] = 'picture_menu_admin';
    }
  }
}
