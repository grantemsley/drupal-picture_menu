<?php

/**
 * @file
 * Defines a picture menu
 */


/**
 * Implements hook_field_info().
 */
function picture_menu_field_info() {
  return array(
    'picture_menu' => array(
      'label' => t('Picture Menu'),
      'description' => t('This field creates picture menus with a header, image and description'),
      'instance_settings' => array(
        'headertag' => 'h3',
        'imageheight' => '300',
        'imagewidth' => '300',
      ),
      'default_widget' => 'picture_menu_widget',
      'default_formatter' => 'picture_menu_default',
    ),
  );
}


/**
 * Implements hook_field_settings_form().
 */
function picture_menu_field_settings_form($field, $instance, $has_data) {
  $settings = $field['settings'];
  $form = array();
  return $form;
}


/**
 * Implements hook_field_instance_settings_form().
 */
function picture_menu_field_instance_settings_form($field, $instance) {
  $settings = $instance['settings'];
  $form['headertag'] = array(
    '#type' => 'select',
    '#title' => t('Header Tag'),
    '#default_value' => $settings['headertag'],
    '#options' => array(
      'span' => t('span'),
      'h1' => t('h1'),
      'h2' => t('h2'),
      'h3' => t('h3'),
      'h4' => t('h4'),
      'h5' => t('h5'),
    ),
    '#description' => t('Controls which header tag is used for the item titles - accessibility guidelines may require a specific header level.'),
  );
  
  $form['imageheight'] = array(
    '#type' => 'textfield',
    '#title' => t('Image Height'),
    '#default_value' => $settings['imageheight'],
    '#description' => t('Controls the height of the image.  eg. "300".  Sizes are in pixels'),
    '#size' => 30,
    '#maxlength' => 30,
    '#required' => TRUE,
    '#element_validate' => array('element_validate_integer_positive'),
  );
  
  $form['imagewidth'] = array(
    '#type' => 'textfield',
    '#title' => t('Image Width'),
    '#default_value' => $settings['imagewidth'],
    '#description' => t('Controls the width of the image and associated menu item.  eg. "300".  Sizes are in pixels.'),
    '#size' => 30,
    '#maxlength' => 30,
    '#required' => TRUE,
    '#element_validate' => array('element_validate_integer_positive'),
  );

  return $form;
}


/**
 * Implements hook_form_FORM_ID_alter().
 */
function picture_menu_form_field_ui_field_edit_form_alter(&$form, &$form_state, $form_id) {
  if ('field_ui_field_edit_form' == $form_id) {
  $types = array(
      'picture_menu',
    );
    if (in_array($form['#field']['type'], $types)) {
      $form['field']['cardinality']['#default_value'] = FIELD_CARDINALITY_UNLIMITED;
      $form['field']['cardinality']['#access'] = FALSE;
    }
  }
}


/**
 * Implements hook_field_validate().
 */
function picture_menu_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
  foreach ($items as $delta => $item) {
    if(!empty($item['header'])) {
      // Make sure there is a picture
      if($item['fid'] == 0) {
        $errors[$field['field_name']][$langcode][$delta][] = array(
          'error' => 'image_missing',
          'message' => t('%name: an image is required', array('%name' => $instance['label'])),
        );
      }
      // Make sure there is a valid link
      if(!valid_url($item['link'])) {
        $errors[$field['field_name']][$langcode][$delta][] = array(
          'error' => 'invalid_link',
          'message' => t('%name: link is invalid', array('%name' => $instance['label'])),
        );
      }
    }
  }
}


/**
 * Implements hook_field_is_empty().
 */
function picture_menu_field_is_empty($item, $field) {
  if(empty($item['header'])) {
    return TRUE;
  }
  return FALSE; 
}


/**
 * Implements hook_field_formatter_info().
 */
function picture_menu_field_formatter_info() {
  $types = array(
    'picture_menu',
  );
  return array(
    'picture_menu_default' => array(
      'label' => t('Default'),
      'field types' => $types,
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function picture_menu_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {


  $result = array(
    array(
      '#markup' => theme('picture_menu', array(
        'items' => $items,
        'headertag' => $instance['settings']['headertag'],
        'imageheight' => $instance['settings']['imageheight'],
        'imagewidth' => $instance['settings']['imagewidth'],        
      )),
    ),
  );
  return $result;
}


/**
 * Returns HTML for the picture menu
 */

function theme_picture_menu($vars) {
  $output = '';

  $output .= '<div id="' . drupal_html_id('picture-menu') . '" class="picture-menu">';
  foreach($vars['items'] as $delta => $item) {
    $output .= theme_picture_menu_item($item, $delta, $vars['headertag'], $vars['imageheight'], $vars['imagewidth']);
  }
  $output .= '</div>';
  return $output;
}

function theme_picture_menu_item($item, $delta, $headertag, $imageheight, $imagewidth) {
  $output = '<div class="picture-menu-item" style="width: ' . $imagewidth . 'px;">';
  $output .= '  <div class="picture-menu-item-header"><' . $headertag . '>' . check_plain($item['header']) . '</' . $headertag . '></div>';
  $output .= '  <div class="picture-menu-item-image"><img src="' . file_create_url(file_load($item['fid'])->uri) . '" alt="' . check_plain($item['header']) . '" style="height: ' . $imageheight . 'px; width: ' . $imagewidth . 'px;"/></div>';
  $output .= '  <a href="' . url($item['link']) . '">' . check_url(url($item['link'])) . '</a>';
  $output .= '  <div class="picture-menu-item-description">' . check_plain($item['description']) . '</div>';
  $output .= '</div>';
  return $output;
}


/**
 * Implements hook_field_widget_info().
 */
function picture_menu_field_widget_info() {
  return array(
    'picture_menu_widget' => array(
      'label' => t('Picture menu'),
      'field types' => array('picture_menu'),
    ),
  );
}


/**
 * Implements hook_field_widget_settings_form().
 */
function picture_menu_field_widget_settings_form($field, $instance) {

}


/**
 * Implements hook_field_widget_form().
 * 
 * This function creates the field elements on the edit page.
 *
 */
function picture_menu_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $element['header'] = array(
    '#title' => 'Header',
    '#type' => 'textfield',
    '#default_value' => isset($items[$delta]['header'])? $items[$delta]['header'] : NULL,
    '#size' => 80,
    '#maxlength' => 255,
    '#description' => 'The header above the image',
    '#required' => FALSE,
  );
  
  // Make the max and min resolutions match the settings.  Array is (max heightxmax width, min heightxmin width)
  $imagesize = array($instance['settings']['imageheight'] . "x" . $instance['settings']['imagewidth'], $instance['settings']['imageheight'] . "x" . $instance['settings']['imagewidth']);
  
  $fid_validators = array(
    'file_validate_size' => array(1024*1024),
    'file_validate_extensions' => array("png gif jpg jpeg"),
    'file_validate_image_resolution' => $imagesize,
  );
  $element['fid'] = array(
    '#title' => 'Image',
    '#type' => 'managed_file',
    '#description' => theme('file_upload_help', array('description' => t('The image to use for this menu item'), 'upload_validators' => $fid_validators)),
    '#default_value' => isset($items[$delta]['fid'])? $items[$delta]['fid'] : NULL,
    '#upload_location' => 'public://picture_menu_images/',
    '#required' => FALSE,
    '#upload_validators' => $fid_validators,
  );
  
  $element['link'] = array(
    '#title' => 'Link',
    '#type' => 'textfield',
    '#default_value' => isset($items[$delta]['link'])? $items[$delta]['link'] : NULL,
    '#size' => 80,
    '#maxlength' => 2083,
    '#description' => 'Link for this item',
    '#required' => FALSE,
  );
  
  $element['description'] = array(
    '#title' => 'Description',
    '#type' => 'textfield',
    '#default_value' => isset($items[$delta]['description']) ? $items[$delta]['description'] : NULL,
    '#description' => 'The short description that appears under the image',
  );
  return $element;
}

/**
 * Implements hook_field_widget_error().
 */
function picture_menu_field_widget_error($element, $error, $form, &$form_state) {
  text_field_widget_error($element, $error, $form, $form_state);
}


/**
 * Wrapper for hook_field_attach_form() and hook_field_attach_submit().
 */
function _picture_menu_field_invoke($op, $entity_type, $entity, &$form, &$form_state) {
  list(, , $bundle) = entity_extract_ids($entity_type, $entity);
  $instances = field_info_instances($entity_type, $bundle);
  $function = '_picture_menu_field_' . $op;
  $types = array(
    'picture_menu',
  );
  foreach ($instances as $instance) {
    $field_name = $instance['field_name'];
    $field = field_info_field($field_name);
    if (in_array($field['type'], $types)) {
      $function($field_name, $entity, $form, $form_state);
    }
  }
}


/**
 * Implements hook_field_attach_form().
 */
function picture_menu_field_attach_form($entity_type, $entity, &$form, &$form_state) {
  _picture_menu_field_invoke('form', $entity_type, $entity, $form, $form_state);
}

/**
 * Implements hook_filter_format_update().
 */
function picture_menu_filter_format_update($format) {
  field_cache_clear();
}

/**
 * Implements hook_filter_format_disable().
 */
function picture_menu_filter_format_disable($format) {
  field_cache_clear();
}


/**
 * Implements hook_theme().
 */
function picture_menu_theme() {
  return array(
    'picture_menu_admin' => array(
      'render element' => 'element',
    ),
    'picture_menu' => array(
      'render element' => 'element',
    ),
  );
}





/**
 * Returns HTML for picture menu admin widget.
 */
function theme_picture_menu_admin($vars) {
 $element = $vars['element'];
  $output = '';
  $table_id = drupal_html_id($element['#field_name'] . '_values');
  $required = !empty($element['#required']) ? theme('form_required_marker', $vars) : '';
  $header = array(
    array(
      'data' => t('Items'),
      'class' => array('tabledrag-hide'),
    ),
    t('Order'),
  );
  $rows = array();
  $items = array();
  foreach (element_children($element) as $key) {
    if ('add_more' === $key) {
      $add_more_button = &$element[$key];
    }
    else {
      $items[] = &$element[$key];
    }
  }
  $depths = array(-1 => -1);
  foreach ($items as $item) {
    $item['_weight']['#attributes']['class'] = array('weight');
    $depth = 0;
    $weight = drupal_render($item['_weight']);
    $cells = array(
      theme('indentation', array('size' => $depth)) . '<div class="accordion-tree-form-item">' . drupal_render($item) . '</div>',
      $weight,
    );
    $rows[] = array(
      'data' => $cells,
      'class' => array('draggable'),
    );
  }
  $output = '<a class="accordionitem-showhide" href="#hide">Show/hide item bodies to rearrange</a>';
  $output .= '<div class="form-item">' . theme('table', array(
    'header' => $header,
    'rows' => $rows,
    'attributes' => array('id' => $table_id),
  )) . ($element['#description'] ? '<div class="description">' . $element['#description'] . '</div>' : '')
    . '<div class="clearfix">' . drupal_render($add_more_button) . '</div></div>';
  drupal_add_tabledrag($table_id, 'order', 'sibling', 'weight', NULL, 'weight');
  $output = array(
    'items' => array(
      '#type' => 'fieldset',
      '#title' => t('!title !required', array(
        '!title' => $element['#title'],
        '!required' => $required,
      )),
      '#attributes' => array('class' => array('collapsible')),
      'content' => array(
        '#markup' => $output,
      ),
    ),
    '#attached' => array('js' => array('misc/collapse.js', 'misc/form.js')),
  );

  return drupal_render($output);
}

function _picture_menu_field_form($name, $entity, &$form, $form_state) {
  foreach ($form[$name] as $l => &$field) {
    if ('#' !== $l[0]) {
      $field['#theme'] = 'picture_menu_admin';
    }
  }
}
